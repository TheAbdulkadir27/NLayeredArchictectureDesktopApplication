// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entity.Concrete.Assembly", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("P00")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P05")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P06")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P08")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P10")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P12")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P15")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P20")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P25")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P30")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P35")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P40")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P45")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P50")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P55")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<string>("P60")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<int>("assemadet")
                        .HasColumnType("int");

                    b.Property<double>("assemkilo")
                        .HasColumnType("double");

                    b.Property<string>("assemkod")
                        .HasColumnType("CHAR(15)");

                    b.Property<string>("comment")
                        .HasColumnType("CHAR(20)");

                    b.Property<DateTime>("cutdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("cutno")
                        .HasColumnType("int");

                    b.Property<string>("meterialtype")
                        .HasColumnType("CHAR(20)");

                    b.Property<int>("pid")
                        .HasColumnType("int");

                    b.Property<int>("sevkadet")
                        .HasColumnType("int");

                    b.Property<string>("sevkkilo")
                        .HasColumnType("CHAR(20)");

                    b.HasKey("ID");

                    b.HasIndex("cutno");

                    b.HasIndex("pid");

                    b.ToTable("assembly");
                });

            modelBuilder.Entity("Entity.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entity.Concrete.Cutting", b =>
                {
                    b.Property<int>("cutid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProjeID")
                        .HasColumnType("int");

                    b.Property<string>("assemkod")
                        .HasColumnType("CHAR(15)");

                    b.Property<string>("comment")
                        .HasColumnType("CHAR(20)");

                    b.Property<DateTime>("cutdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("cutno")
                        .HasColumnType("int");

                    b.Property<int>("cutqty")
                        .HasColumnType("int");

                    b.Property<string>("profile")
                        .HasColumnType("CHAR(15)");

                    b.Property<string>("single")
                        .HasColumnType("CHAR(15)");

                    b.Property<string>("skilo")
                        .HasColumnType("CHAR(25)");

                    b.HasKey("cutid");

                    b.HasIndex("ProjeID");

                    b.ToTable("cutting");
                });

            modelBuilder.Entity("Entity.Concrete.Plates", b =>
                {
                    b.Property<int>("plateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("plateComment")
                        .HasColumnType("CHAR(25)");

                    b.Property<string>("plateNo")
                        .HasColumnType("CHAR(25)");

                    b.HasKey("plateID");

                    b.ToTable("plates");
                });

            modelBuilder.Entity("Entity.Concrete.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UnitİnStock")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entity.Concrete.Proje", b =>
                {
                    b.Property<int>("pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("paciklama")
                        .HasColumnType("CHAR(50)");

                    b.Property<string>("pisim")
                        .HasColumnType("CHAR(50)");

                    b.Property<string>("pkod")
                        .HasColumnType("CHAR(20)");

                    b.HasKey("pid");

                    b.ToTable("proje");
                });

            modelBuilder.Entity("Entity.Concrete.Sevkiyat", b =>
                {
                    b.Property<int>("sevkid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("eskisevkmi")
                        .HasColumnType("CHAR(1)");

                    b.Property<string>("konteynerno")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("paketno")
                        .HasColumnType("CHAR(20)");

                    b.Property<int>("pid")
                        .HasColumnType("int");

                    b.Property<string>("pozno")
                        .HasColumnType("CHAR(25)");

                    b.Property<int>("sevkadet")
                        .HasColumnType("int");

                    b.Property<string>("sevkkilo")
                        .HasColumnType("CHAR(25)");

                    b.Property<int>("sevkno")
                        .HasColumnType("int");

                    b.Property<DateTime>("sevktarihi")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("sevktopkilo")
                        .HasColumnType("CHAR(20)");

                    b.HasKey("sevkid");

                    b.HasIndex("pid");

                    b.ToTable("sevkiyat");
                });

            modelBuilder.Entity("Entity.Concrete.Single", b =>
                {
                    b.Property<int>("sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("assemid")
                        .HasColumnType("int");

                    b.Property<int>("assemxsing")
                        .HasColumnType("int");

                    b.Property<int>("pid")
                        .HasColumnType("int");

                    b.Property<int>("sadet")
                        .HasColumnType("int");

                    b.Property<string>("sisim")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<double>("skilo")
                        .HasColumnType("double");

                    b.Property<string>("sprofile")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<int>("suzunluk")
                        .HasColumnType("int");

                    b.HasKey("sid");

                    b.HasIndex("assemid");

                    b.HasIndex("pid");

                    b.ToTable("single");
                });

            modelBuilder.Entity("Entity.Concrete.Sofor", b =>
                {
                    b.Property<int>("kayıtid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("aracplaka")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("dorseplaka")
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("imalatsorumlu")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("kalitesorumlu")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<double>("kantarkilo")
                        .HasColumnType("double");

                    b.Property<string>("konteynerno")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<int>("pid")
                        .HasColumnType("int");

                    b.Property<byte[]>("resim")
                        .HasColumnType("VARBINARY(32767)");

                    b.Property<int>("sevkno")
                        .HasColumnType("int");

                    b.Property<string>("sevksorumlu")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("soforadi")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("sofortel")
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("kayıtid");

                    b.HasIndex("pid");

                    b.ToTable("sofor");
                });

            modelBuilder.Entity("Entity.Concrete.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("UserLevel")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<string>("UserPass")
                        .HasColumnType("VARCHAR(25)");

                    b.HasKey("userID");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Entity.Concrete.Assembly", b =>
                {
                    b.HasOne("Entity.Concrete.Cutting", "Cutting")
                        .WithMany()
                        .HasForeignKey("cutno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Proje", "Proje")
                        .WithMany()
                        .HasForeignKey("pid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.Cutting", b =>
                {
                    b.HasOne("Entity.Concrete.Proje", "pid")
                        .WithMany()
                        .HasForeignKey("ProjeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.Sevkiyat", b =>
                {
                    b.HasOne("Entity.Concrete.Proje", "proje")
                        .WithMany()
                        .HasForeignKey("pid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.Single", b =>
                {
                    b.HasOne("Entity.Concrete.Assembly", "Assembly")
                        .WithMany()
                        .HasForeignKey("assemid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Proje", "proje")
                        .WithMany()
                        .HasForeignKey("pid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.Sofor", b =>
                {
                    b.HasOne("Entity.Concrete.Proje", "Proje")
                        .WithMany()
                        .HasForeignKey("pid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
